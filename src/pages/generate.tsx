/* eslint-disable @next/next/no-img-element */
/* eslint-disable jsx-a11y/alt-text */
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { Button } from "~/component/Button";
import { FormGroup } from "~/component/FormGroup";
import { Input } from "~/component/Input";
import { api } from "~/utils/api";

const colors = [
  "Blue",
  "Red",
  "Pink",
  "Green",
  "Orange",
  "Yellow",
  "White",
  "Black",
];

const shapes = ["Square", "Circle", "Rounded"];

const styles = [
  "Claymorphic",
  "3D Rendered",
  "Pixelated",
  "Illustrated with color pencil",
];

const GeneratePage: NextPage = () => {
  const [form, setForm] = useState({
    prompt: "",
    color: "",
    shape: "",
    style: "",
    numberOfIcons: "1",
  });
  const [error, setError] = useState("");
  const [imagesUrl, setImagesUrl] = useState<{ imageUrl: string }[]>([]);

  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess(data) {
      setImagesUrl(data);
    },
    onError(error) {
      setError(error.message);
    },
  });

  function handleFormSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError("");
    generateIcon.mutate({
      ...form,
      numberOfIcons: parseInt(form.numberOfIcons),
    });
  }

  function updateForm(key: string) {
    return function (e: React.ChangeEvent<HTMLInputElement>) {
      setForm((prev) => ({
        ...prev,
        [key]: e.target.value,
      }));
    };
  }

  return (
    <>
      <Head>
        <title>Generate Icons</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mt-24 flex min-h-screen flex-col gap-6 px-8">
      <h1 className="text-6xl font-bold mb-6 text-center text-transparent bg-clip-text bg-gradient-to-r from-purple-400 via-pink-500 to-orange-500">
        Generate Your Icons
      </h1>
      {/* <p className="mb-12 text-2xl text-center text-gray-700">
        Fill out the form below to start generating your icons.
      </p> */}
      <form className="flex flex-col gap-6 border-4 p-8 mb-8 rounded-lg shadow-lg" onSubmit={handleFormSubmit}>
        <div className="mb-6">
          <h2 className="text-2xl font-semibold mb-2">
            1. Describe what you want your icon to look like.
          </h2>
          <FormGroup>
            <label className="text-lg mb-2">Prompt</label>
            <Input
              required
              value={form.prompt}
              onChange={updateForm("prompt")}
              className="p-3 bg-gray-100 border border-gray-300 rounded"
            ></Input>
          </FormGroup>
        </div>

        <div className="mb-6">
          <h2 className="text-2xl font-semibold mb-2">2. Pick your icon color</h2>
          <FormGroup className="grid grid-cols-2 sm:grid-cols-4 gap-4">
            {colors.map((color) => (
              <label key={color} className="flex items-center gap-2 text-xl cursor-pointer">
                <input
                  required
                  type="radio"
                  name="color"
                  checked={color === form.color}
                  onChange={() => setForm((prev) => ({ ...prev, color }))}
                  className="hidden peer"
                />
                <span className="w-6 h-6 inline-block rounded-full border-2 border-gray-300 peer-checked:border-purple-500 peer-checked:bg-purple-500 transition-all duration-300"></span>
                {color}
              </label>
            ))}
          </FormGroup>
        </div>

        <div className="mb-6">
          <h2 className="text-2xl font-semibold mb-2">3. Pick your icon shape</h2>
          <FormGroup className="grid grid-cols-2 sm:grid-cols-4 gap-4">
            {shapes.map((shape) => (
              <label key={shape} className="flex items-center gap-2 text-xl cursor-pointer">
                <input
                  required
                  type="radio"
                  name="shape"
                  checked={shape === form.shape}
                  onChange={() => setForm((prev) => ({ ...prev, shape }))}
                  className="hidden peer"
                />
                <span className="w-6 h-6 inline-block rounded-full border-2 border-gray-300 peer-checked:border-purple-500 peer-checked:bg-purple-500 transition-all duration-300"></span>
                {shape}
              </label>
            ))}
          </FormGroup>
        </div>

        <div className="mb-6">
          <h2 className="text-2xl font-semibold mb-2">4. Pick your icon style</h2>
          <FormGroup className="grid grid-cols-2 sm:grid-cols-4 gap-4">
            {styles.map((style) => (
              <label key={style} className="flex items-center gap-2 text-xl cursor-pointer">
                <input
                  required
                  type="radio"
                  name="style"
                  checked={style === form.style}
                  onChange={() => setForm((prev) => ({ ...prev, style }))}
                  className="hidden peer"
                />
                <span className="w-6 h-6 inline-block rounded-full border-2 border-gray-300 peer-checked:border-purple-500 peer-checked:bg-purple-500 transition-all duration-300"></span>
                {style}
              </label>
            ))}
          </FormGroup>
        </div>

        <div className="mb-6">
          <h2 className="text-2xl font-semibold mb-2">5. How many do you want</h2>
          <FormGroup>
            <label className="text-lg mb-2">Number of icons</label>
            <Input
              type="number"
              value={form.numberOfIcons}
              required
              onChange={updateForm("numberOfIcons")}
              className="p-3 bg-gray-100 border border-gray-300 rounded"
            ></Input>
          </FormGroup>
        </div>

        {error && (
          <div className="rounded bg-red-500 p-4 text-xl text-white">
            {error}
          </div>
        )}

        <Button
          isLoading={generateIcon.isLoading}
          disabled={generateIcon.isLoading}
          className="bg-gradient-to-r from-purple-400 via-pink-500 to-orange-500 text-white py-3 px-6 rounded-lg hover:from-purple-500 hover:via-pink-600 hover:to-orange-600"
        >
          Submit
        </Button>
      </form>

      {imagesUrl.length > 0 && (
        <>
          <h2 className="text-2xl font-semibold mt-12 mb-4">Your Icons</h2>
          <section className="mb-12 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
            {imagesUrl.map(({ imageUrl }) => (
              <Image
                key={imageUrl}
                src={imageUrl}
                alt="an image of your generated prompt"
                width="512"
                height="512"
                className="w-full rounded-lg shadow-md"
              />
            ))}
          </section>
        </>
      )}
    </main>
    </>
  );
};

export default GeneratePage;
